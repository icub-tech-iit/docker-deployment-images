name: PR Validation

on:
  pull_request:
    branches:
      - master
    paths:
      - 'dockerfile_images/**'

env:
  REGISTRY: ghcr.io
  REPOSITORY_NAME: ${{ github.repository }}
  REPOSITORY_OWNER: ${{ github.repository_owner }}
  DEFAULT_USER: defaultuser
  IMAGE_PREFIX: cd_
  SUPERBUILD_TAG: v2023.08.0

jobs:
  check_files:
    runs-on: [ubuntu-latest]
    steps:
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.4
      - name: test_file_changes
        run: |
          cat $HOME/files.json
          cat $HOME/files_modified.json
          cat $HOME/files_added.json
          cat $HOME/files_removed.json
          echo '${{ steps.file_changes.outputs.files}}'
          echo '${{ steps.file_changes.outputs.files_modified}}'
          echo '${{ steps.file_changes.outputs.files_added}}'
          echo '${{ steps.file_changes.outputs.files_removed}}'
      - uses: actions/checkout@v4
      
      - name: Find modified images
        id: set-matrix

        run: |
          parsed_list=($(echo '${{ steps.file_changes.outputs.files}}' | tr ',' '\n'))
          superbuild_elements=()
          version_matrix=""
          custom_matrix=""
          superbuild_flag=false
          custom_flag=false
              
          for i in "${parsed_list[@]}"
          do
            folder=$(echo $i | awk -F'/' '{print $1}' | tr -d '"' | tr -d '[' | tr -d ']')
            if [ "$folder" == "dockerfile_images" ]
            then
              element=$(echo $i | awk -F'/' '{print $3}' | tr -d '"' | tr -d '[' | tr -d ']')
              image_path=dockerfile_images/$(echo $i | awk -F'/' '{print $2}' | tr -d '"' | tr -d '[' | tr -d ']')
              element_flag=false
              while read -r line || [ -n "$line" ]
              do
                if [ "$line" == "[superbuild]" ]
                then
                  superbuild_flag=true
                  element_flag=true
                fi
              done < $image_path/$element/conf_build.ini
              if [[ $element_flag == true ]]
              then
                superbuild_elements+=("$element")
              else
                custom_flag=true
                custom_matrix="$custom_matrix\"$element\"," # keep as before
              fi
            fi
          done

          # Deduplicate superbuild_elements
          unique_superbuild_elements=($(printf "%s\n" "${superbuild_elements[@]}" | sort -u))
          superbuild_matrix_json="["
          for elem in "${unique_superbuild_elements[@]}"; do
          superbuild_matrix_json="$superbuild_matrix_json\"$elem\"," 
          done
          # Remove trailing comma and close JSON array
          superbuild_matrix_json="${superbuild_matrix_json%,}]"

          version_matrix="[ \"master\" ]"

          echo "superbuild_matrix=$superbuild_matrix_json" >> $GITHUB_OUTPUT
          echo "superbuild_flag=$superbuild_flag" >> $GITHUB_OUTPUT
          echo "paths=${parsed_list[@]}" >> $GITHUB_OUTPUT
          echo "version=$version_matrix" >> $GITHUB_OUTPUT
  
    outputs:
      superbuild_matrix: ${{ steps.set-matrix.outputs.superbuild_matrix }}
      superbuild_flag: ${{ steps.set-matrix.outputs.superbuild_flag }}
      paths: ${{ steps.set-matrix.outputs.paths }}
      version: ${{ steps.set-matrix.outputs.version }}

  validate_superbuild:
    runs-on: [ubuntu-latest]
    needs: check_files
    if: needs.check_files.outputs.superbuild_flag == 'true'
    strategy:
      matrix: 
        apps: ${{fromJson(needs.check_files.outputs.superbuild_matrix)}}
        version: ${{fromJson(needs.check_files.outputs.version)}} 
        tag: [ Stable, Unstable, Custom ]
        exclude:
          - version: master
            tag: Custom
      fail-fast: false
      max-parallel: 4

    steps:
      - uses: actions/checkout@v4

      - name: Get path 
        id: get_path
        run: |            
          for j in ${{needs.check_files.outputs.paths}}
          do
              if [ $(echo $j | awk '/'"${{matrix.apps}}"'/') ]
              then
                  path="dockerfile_images/$(echo $j | awk -F'/' '{print $2}' | tr -d '"')"
                  echo "PATH=$path" >> $GITHUB_OUTPUT
                  exit 0
              fi
          done  

      - name: Get version and tag
        id: get_version
        run: |
          echo "VERSION=master" >> $GITHUB_OUTPUT
          echo "TAG=-stable" >> $GITHUB_OUTPUT

      - name: Get date hour tag
        id: get_date
        run: |
          echo "$(date +'%Y-%m-%d_%H:%M:%S')" > DATE_HOUR
          echo "DATE_HOUR_TAG=$( cat DATE_HOUR)" >> $GITHUB_OUTPUT


      - name: Get Build Arguments
        id: get_args
        run: |
          sources_args=""
          tag_arg=""
          img_name=""
          sources_flag=false
          tag_flag=false
          compile_sources=false

          VERSION="${{ steps.get_version.outputs.VERSION }}"
          TAG="${{ steps.get_version.outputs.TAG }}"

          while read -r line || [ -n "$line" ]
          do
            # Expand workflow and env variables in the line
            line=$(echo "$line" > temp.tmp && sed -i 's/{{matrix.apps}}/${{matrix.apps}}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{matrix.version}}/${{matrix.version}}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{matrix.tag}}/${{matrix.tag}}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{steps.get_version.outputs.VERSION}}/${{steps.get_version.outputs.VERSION}}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{steps.get_version.outputs.TAG}}/${{steps.get_version.outputs.TAG}}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{steps.get_date.outputs.DATE_HOUR_TAG}}/${{ steps.get_date.outputs.DATE_HOUR_TAG }}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{env.REGISTRY}}/${{ env.REGISTRY }}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's@{{env.REPOSITORY_NAME}}@${{ env.REPOSITORY_NAME }}@g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{env.IMAGE_PREFIX}}/${{ env.IMAGE_PREFIX }}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{env.REPOSITORY_OWNER}}/${{ env.REPOSITORY_OWNER }}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{env.DEFAULT_USER}}/${{ env.DEFAULT_USER }}/g' temp.tmp && cat temp.tmp)
            line=$(echo "$line" > temp.tmp && sed -i 's/{{env.SUPERBUILD_TAG}}/${{ env.SUPERBUILD_TAG }}/g' temp.tmp && cat temp.tmp)

            if [ "$line" == "[sources]" ]
            then
                sources_flag=true
                tag_flag=false
                compile_sources=true
            fi
            if [ "$line" == "[tag]" ]
            then
                sources_flag=false
                tag_flag=true
            fi
            if [ "$line" != "[sources]" ] && [ "$line" != "[binaries]" ] && [ "$line" != "[tag]" ] && [ "$line" != "[superbuild]" ] && [ "$line" != "" ]
            then
              if [[ $sources_flag != false ]]
              then
                  sources_args="$sources_args --build-arg $line"
              fi
              if [[ $tag_flag != false ]] 
              then
                  tag_arg="--tag ${{ env.DEFAULT_USER }}/$line"
                  img_name="$line"
              fi
            fi
          done < ${{ steps.get_path.outputs.PATH }}/${{matrix.apps}}/conf_build.ini

          echo "SRC_ARGS=$sources_args" >> $GITHUB_OUTPUT
          echo "TAG_ARGS=$tag_arg" >> $GITHUB_OUTPUT
          echo "IMG_NAME=$img_name" >> $GITHUB_OUTPUT
          echo "CMPL_SRC=$compile_sources" >> $GITHUB_OUTPUT

      - name: Build Docker sources images
        id: build-sources
        if: steps.get_args.outputs.CMPL_SRC == 'true'
        run: |
          docker build ${{ steps.get_args.outputs.SRC_ARGS }} \
            --no-cache ${{ steps.get_path.outputs.PATH }}/${{matrix.apps}} \
            --file ${{ steps.get_path.outputs.PATH }}/${{matrix.apps}}/Dockerfile \
            ${{ steps.get_args.outputs.TAG_ARGS }}
